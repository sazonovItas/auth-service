// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: user.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one
insert into users (id, email, login, password_hash, avatar) 
values ($1, $2,  $3, $4, $5) returning id, email, login, password_hash, first_name, last_name, middle_name, avatar, created_at, updated_at, deleted_at
`

type CreateUserParams struct {
	ID           pgtype.UUID
	Email        string
	Login        string
	PasswordHash string
	Avatar       string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.ID,
		arg.Email,
		arg.Login,
		arg.PasswordHash,
		arg.Avatar,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Login,
		&i.PasswordHash,
		&i.FirstName,
		&i.LastName,
		&i.MiddleName,
		&i.Avatar,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT id, email, login, password_hash, first_name, last_name, middle_name, avatar, created_at, updated_at, deleted_at FROM users WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, id pgtype.UUID) (User, error) {
	row := q.db.QueryRow(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Login,
		&i.PasswordHash,
		&i.FirstName,
		&i.LastName,
		&i.MiddleName,
		&i.Avatar,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
select id, email, login, password_hash, first_name, last_name, middle_name, avatar, created_at, updated_at, deleted_at from users where email = $1 limit 1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Login,
		&i.PasswordHash,
		&i.FirstName,
		&i.LastName,
		&i.MiddleName,
		&i.Avatar,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getUserByLogin = `-- name: GetUserByLogin :one
select id, email, login, password_hash, first_name, last_name, middle_name, avatar, created_at, updated_at, deleted_at from users where login = $1 limit 1
`

func (q *Queries) GetUserByLogin(ctx context.Context, login string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByLogin, login)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Login,
		&i.PasswordHash,
		&i.FirstName,
		&i.LastName,
		&i.MiddleName,
		&i.Avatar,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}
